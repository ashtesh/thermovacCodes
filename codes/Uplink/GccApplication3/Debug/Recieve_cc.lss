
Recieve_cc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  000004ac  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009f  008000b0  008000b0  00000590  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015ce  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000464  00000000  00000000  00001c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059f  00000000  00000000  000020ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d8  00000000  00000000  0000266c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000494  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c80  00000000  00000000  00002cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00003958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ea       	ldi	r30, 0xAC	; 172
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 3b       	cpi	r26, 0xB0	; 176
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a0 eb       	ldi	r26, 0xB0	; 176
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 34       	cpi	r26, 0x4F	; 79
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	f2 d1       	rcall	.+996    	; 0x43e <main>
  5a:	26 c2       	rjmp	.+1100   	; 0x4a8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <crc16>:
  
  memcpy(buf, "CQ    ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] ;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100000;
  5e:	7f ef       	ldi	r23, 0xFF	; 255
  60:	76 0f       	add	r23, r22
  
  memcpy(buf, "VU2DMQ", AX_ADDR_SIZE);
  62:	66 23       	and	r22, r22
  64:	19 f1       	breq	.+70     	; 0xac <crc16+0x4e>
  66:	e8 2f       	mov	r30, r24
  68:	f9 2f       	mov	r31, r25
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	9f ef       	ldi	r25, 0xFF	; 255
  6e:	21 91       	ld	r18, Z+
  70:	29 27       	eor	r18, r25
  72:	32 2f       	mov	r19, r18
  74:	32 95       	swap	r19
  76:	3f 70       	andi	r19, 0x0F	; 15
  78:	23 27       	eor	r18, r19
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	98 2f       	mov	r25, r24
  7e:	88 27       	eor	r24, r24
  80:	82 27       	eor	r24, r18
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] ;
  82:	93 27       	eor	r25, r19
  84:	a9 01       	movw	r20, r18
    frame[i + size] = buf[i] ;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100000;
  
  memcpy(buf, "VU2DMQ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
  86:	54 2f       	mov	r21, r20
  88:	44 27       	eor	r20, r20
  8a:	52 95       	swap	r21
    frame[i + size] = buf[i] ;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01101000;
  8c:	50 7f       	andi	r21, 0xF0	; 240
  8e:	84 27       	eor	r24, r20
  90:	95 27       	eor	r25, r21
  92:	22 0f       	add	r18, r18
  
  memcpy(buf, "RELAY ", AX_ADDR_SIZE);
  94:	33 1f       	adc	r19, r19
  96:	22 95       	swap	r18
  98:	32 95       	swap	r19
  9a:	30 7f       	andi	r19, 0xF0	; 240
  9c:	32 27       	eor	r19, r18
  9e:	20 7f       	andi	r18, 0xF0	; 240
  a0:	32 27       	eor	r19, r18
  a2:	82 27       	eor	r24, r18
  a4:	93 27       	eor	r25, r19
  a6:	71 50       	subi	r23, 0x01	; 1
  a8:	10 f7       	brcc	.-60     	; 0x6e <crc16+0x10>
  aa:	08 95       	ret
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	9f ef       	ldi	r25, 0xFF	; 255
  b0:	08 95       	ret

000000b2 <ATMEGA_Init>:
  b2:	81 e0       	ldi	r24, 0x01	; 1
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] ;
  b4:	84 bb       	out	0x14, r24	; 20
  b6:	85 bb       	out	0x15, r24	; 21
    frame[i + size] = buf[i] ;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01101000;
  
  memcpy(buf, "RELAY ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
  b8:	8f 9a       	sbi	0x11, 7	; 17
  ba:	97 9a       	sbi	0x12, 7	; 18
  bc:	d7 d1       	rcall	.+942    	; 0x46c <init_UART0>
    frame[i + size] = buf[i] ;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100001;
  be:	bc 98       	cbi	0x17, 4	; 23
  c0:	bd 9a       	sbi	0x17, 5	; 23
  c2:	bb 9a       	sbi	0x17, 3	; 23
  
  frame[size++] = AX_CONTROL;
  c4:	ba 9a       	sbi	0x17, 2	; 23
  c6:	b8 98       	cbi	0x17, 0	; 23
  frame[size++] = AX_PID;
  c8:	83 e5       	ldi	r24, 0x53	; 83
  ca:	8d b9       	out	0x0d, r24	; 13
  
  memcpy(buf, data, 8);
  cc:	1e b8       	out	0x0e, r1	; 14
  ce:	c2 9a       	sbi	0x18, 2	; 24
  d0:	c3 98       	cbi	0x18, 3	; 24
  d2:	c5 9a       	sbi	0x18, 5	; 24
  d4:	08 95       	ret

000000d6 <ccxxx0_Read>:
  d6:	c2 98       	cbi	0x18, 2	; 24
  d8:	b4 99       	sbic	0x16, 4	; 22
  da:	fe cf       	rjmp	.-4      	; 0xd8 <ccxxx0_Read+0x2>
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	8f b9       	out	0x0f, r24	; 15
  e0:	77 9b       	sbis	0x0e, 7	; 14
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <ccxxx0_Read+0xa>
  e4:	8f b1       	in	r24, 0x0f	; 15
  e6:	1f b8       	out	0x0f, r1	; 15
  for(i = 0; i < 8; i++)
  frame[i + size] = buf[i] ;
  e8:	77 9b       	sbis	0x0e, 7	; 14
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <ccxxx0_Read+0x12>
  
  frame[size++] = AX_CONTROL;
  frame[size++] = AX_PID;
  
  memcpy(buf, data, 8);
  for(i = 0; i < 8; i++)
  ec:	8f b1       	in	r24, 0x0f	; 15
  ee:	c2 9a       	sbi	0x18, 2	; 24
  f0:	08 95       	ret

000000f2 <ccxxx0_Write>:
  frame[i + size] = buf[i] ;
  size += 8;

  //tp = "VU2DMQ";
  crc = crc16(frame+1,31);
  f2:	c2 98       	cbi	0x18, 2	; 24
  f4:	b4 99       	sbic	0x16, 4	; 22
  
  memcpy(buf, &crc, 2);
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <ccxxx0_Write+0x2>
  f8:	8f b9       	out	0x0f, r24	; 15
  for(i = 0; i < 2; i++)
  frame[i + size] = buf[i] ;
  fa:	77 9b       	sbis	0x0e, 7	; 14
  fc:	fe cf       	rjmp	.-4      	; 0xfa <ccxxx0_Write+0x8>
  fe:	8f b1       	in	r24, 0x0f	; 15
 100:	6f b9       	out	0x0f, r22	; 15
 102:	77 9b       	sbis	0x0e, 7	; 14
 104:	fe cf       	rjmp	.-4      	; 0x102 <ccxxx0_Write+0x10>
 106:	8f b1       	in	r24, 0x0f	; 15
  size += 2;
  
  frame[size++] = AX_FLAG;
 108:	c2 9a       	sbi	0x18, 2	; 24
 10a:	08 95       	ret

0000010c <ccxxx0_Strobe>:
 10c:	c2 98       	cbi	0x18, 2	; 24
  
}
 10e:	b4 99       	sbic	0x16, 4	; 22
 110:	fe cf       	rjmp	.-4      	; 0x10e <ccxxx0_Strobe+0x2>
 112:	8f b9       	out	0x0f, r24	; 15
 114:	77 9b       	sbis	0x0e, 7	; 14
 116:	fe cf       	rjmp	.-4      	; 0x114 <ccxxx0_Strobe+0x8>
 118:	8f b1       	in	r24, 0x0f	; 15
 11a:	c2 9a       	sbi	0x18, 2	; 24
 11c:	08 95       	ret

0000011e <ccxxx0_ReadBurst>:
 11e:	c2 98       	cbi	0x18, 2	; 24
 120:	b4 99       	sbic	0x16, 4	; 22
 122:	fe cf       	rjmp	.-4      	; 0x120 <ccxxx0_ReadBurst+0x2>
 124:	80 6c       	ori	r24, 0xC0	; 192
 126:	8f b9       	out	0x0f, r24	; 15
 128:	77 9b       	sbis	0x0e, 7	; 14
 12a:	fe cf       	rjmp	.-4      	; 0x128 <ccxxx0_ReadBurst+0xa>

	while(PINB & (1 << CC_SO));

	SPDR = (addr | 0xc0);
	while(!(SPSR & (1<<SPIF)));
	x = SPDR;// flush SPDR
 12c:	8f b1       	in	r24, 0x0f	; 15

	while(dataCount) {
 12e:	41 15       	cp	r20, r1
 130:	51 05       	cpc	r21, r1
 132:	59 f0       	breq	.+22     	; 0x14a <ccxxx0_ReadBurst+0x2c>
 134:	fb 01       	movw	r30, r22
 136:	46 0f       	add	r20, r22
 138:	57 1f       	adc	r21, r23
		SPDR = 0;
 13a:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<<SPIF)));
 13c:	77 9b       	sbis	0x0e, 7	; 14
 13e:	fe cf       	rjmp	.-4      	; 0x13c <ccxxx0_ReadBurst+0x1e>

		*dataPtr++ = SPDR; // get data from SPDR
 140:	8f b1       	in	r24, 0x0f	; 15
 142:	81 93       	st	Z+, r24

	SPDR = (addr | 0xc0);
	while(!(SPSR & (1<<SPIF)));
	x = SPDR;// flush SPDR

	while(dataCount) {
 144:	e4 17       	cp	r30, r20
 146:	f5 07       	cpc	r31, r21
 148:	c1 f7       	brne	.-16     	; 0x13a <ccxxx0_ReadBurst+0x1c>

		*dataPtr++ = SPDR; // get data from SPDR
		dataCount--;
	}

	PORTB |= (1 << CC_CSN);
 14a:	c2 9a       	sbi	0x18, 2	; 24
 14c:	08 95       	ret

0000014e <ccxxx0_WriteBurst>:

void ccxxx0_WriteBurst(unsigned char addr, unsigned char* dataPtr, unsigned int dataCount)
{
	unsigned char x;

	PORTB &= ~(1 << CC_CSN);
 14e:	c2 98       	cbi	0x18, 2	; 24

	while(PINB & (1 << CC_SO));
 150:	b4 99       	sbic	0x16, 4	; 22
 152:	fe cf       	rjmp	.-4      	; 0x150 <ccxxx0_WriteBurst+0x2>

	SPDR = addr | 0x40;
 154:	80 64       	ori	r24, 0x40	; 64
 156:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 158:	77 9b       	sbis	0x0e, 7	; 14
 15a:	fe cf       	rjmp	.-4      	; 0x158 <ccxxx0_WriteBurst+0xa>
	x = SPDR; // flush SPDR
 15c:	8f b1       	in	r24, 0x0f	; 15

	while(dataCount) {
 15e:	41 15       	cp	r20, r1
 160:	51 05       	cpc	r21, r1
 162:	51 f0       	breq	.+20     	; 0x178 <ccxxx0_WriteBurst+0x2a>
 164:	fb 01       	movw	r30, r22
 166:	46 0f       	add	r20, r22
 168:	57 1f       	adc	r21, r23
		SPDR = *dataPtr++;
 16a:	81 91       	ld	r24, Z+
 16c:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
 16e:	77 9b       	sbis	0x0e, 7	; 14
 170:	fe cf       	rjmp	.-4      	; 0x16e <ccxxx0_WriteBurst+0x20>

	SPDR = addr | 0x40;
	while(!(SPSR & (1<<SPIF)));
	x = SPDR; // flush SPDR

	while(dataCount) {
 172:	e4 17       	cp	r30, r20
 174:	f5 07       	cpc	r31, r21
 176:	c9 f7       	brne	.-14     	; 0x16a <ccxxx0_WriteBurst+0x1c>
		while(!(SPSR & (1<<SPIF)));

		dataCount--;
	}

	PORTB |= (1 << CC_CSN);
 178:	c2 9a       	sbi	0x18, 2	; 24
 17a:	08 95       	ret

0000017c <ccxxx0_PowerOnReset>:

void ccxxx0_PowerOnReset()
{
	unsigned char x;
	//datasheet cc1101 pg on.51
	PORTB |= (1 << CC_CSN);
 17c:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	8a 95       	dec	r24
 182:	f1 f7       	brne	.-4      	; 0x180 <ccxxx0_PowerOnReset+0x4>
 184:	00 c0       	rjmp	.+0      	; 0x186 <ccxxx0_PowerOnReset+0xa>
	_delay_us(1);
	PORTB &= ~(1 << CC_CSN);
 186:	c2 98       	cbi	0x18, 2	; 24
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	8a 95       	dec	r24
 18c:	f1 f7       	brne	.-4      	; 0x18a <ccxxx0_PowerOnReset+0xe>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <ccxxx0_PowerOnReset+0x14>
	_delay_us(1);
	PORTB |= (1 << CC_CSN);
 190:	c2 9a       	sbi	0x18, 2	; 24
 192:	8d e6       	ldi	r24, 0x6D	; 109
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <ccxxx0_PowerOnReset+0x18>
 198:	00 00       	nop
	_delay_us(41);
	
	PORTB &= ~(1 << CC_CSN);
 19a:	c2 98       	cbi	0x18, 2	; 24
	
	while(PINB & (1 << CC_SO));
 19c:	b4 99       	sbic	0x16, 4	; 22
 19e:	fe cf       	rjmp	.-4      	; 0x19c <ccxxx0_PowerOnReset+0x20>
 1a0:	85 e8       	ldi	r24, 0x85	; 133
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <ccxxx0_PowerOnReset+0x26>
 1a6:	00 00       	nop
	
	_delay_us(50);

	SPDR = CCxxx0_SRES;
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 1ac:	77 9b       	sbis	0x0e, 7	; 14
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <ccxxx0_PowerOnReset+0x30>
	x = SPDR; // flush SPDR
 1b0:	8f b1       	in	r24, 0x0f	; 15
	
	while(PINB & (1 << CC_SO));
 1b2:	b4 99       	sbic	0x16, 4	; 22
 1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <ccxxx0_PowerOnReset+0x36>
 1b6:	85 e8       	ldi	r24, 0x85	; 133
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <ccxxx0_PowerOnReset+0x3c>
 1bc:	00 00       	nop

	_delay_us(50);
	
	PORTB |= (1 << CC_CSN);
 1be:	c2 9a       	sbi	0x18, 2	; 24
 1c0:	08 95       	ret

000001c2 <ccxxx0_Setup>:
}
void ccxxx0_Setup(const RF_SETTINGS* settings)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
	unsigned char read;
	// Write register settings
	ccxxx0_Write(CCxxx0_IOCFG0,   settings->IOCFG0);
 1c8:	68 81       	ld	r22, Y
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	92 df       	rcall	.-220    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_IOCFG0);
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	82 df       	rcall	.-252    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 1d2:	5a d1       	rcall	.+692    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FIFOTHR,  settings->FIFOTHR);
 1d4:	69 81       	ldd	r22, Y+1	; 0x01
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	8c df       	rcall	.-232    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FIFOTHR);
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	7c df       	rcall	.-264    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 1de:	54 d1       	rcall	.+680    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_PKTCTRL0, settings->PKTCTRL0);
 1e0:	6a 81       	ldd	r22, Y+2	; 0x02
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	86 df       	rcall	.-244    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_PKTCTRL0);
 1e6:	88 e0       	ldi	r24, 0x08	; 8
 1e8:	76 df       	rcall	.-276    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 1ea:	4e d1       	rcall	.+668    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FSCTRL1,  settings->FSCTRL1);
 1ec:	6b 81       	ldd	r22, Y+3	; 0x03
 1ee:	8b e0       	ldi	r24, 0x0B	; 11
 1f0:	80 df       	rcall	.-256    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCTRL1);
 1f2:	8b e0       	ldi	r24, 0x0B	; 11
 1f4:	70 df       	rcall	.-288    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 1f6:	48 d1       	rcall	.+656    	; 0x488 <transmit_UART0>
	//ccxxx0_Write(CCxxx0_FSCTRL0,  settings->FSCTRL0);
	ccxxx0_Write(CCxxx0_FREQ2,    settings->FREQ2);
 1f8:	6c 81       	ldd	r22, Y+4	; 0x04
 1fa:	8d e0       	ldi	r24, 0x0D	; 13
 1fc:	7a df       	rcall	.-268    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FREQ2);
 1fe:	8d e0       	ldi	r24, 0x0D	; 13
 200:	6a df       	rcall	.-300    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 202:	42 d1       	rcall	.+644    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FREQ1,    settings->FREQ1);
 204:	6d 81       	ldd	r22, Y+5	; 0x05
 206:	8e e0       	ldi	r24, 0x0E	; 14
 208:	74 df       	rcall	.-280    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FREQ1);
 20a:	8e e0       	ldi	r24, 0x0E	; 14
 20c:	64 df       	rcall	.-312    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 20e:	3c d1       	rcall	.+632    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FREQ0,    settings->FREQ0);
 210:	6e 81       	ldd	r22, Y+6	; 0x06
 212:	8f e0       	ldi	r24, 0x0F	; 15
 214:	6e df       	rcall	.-292    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FREQ0);
 216:	8f e0       	ldi	r24, 0x0F	; 15
 218:	5e df       	rcall	.-324    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 21a:	36 d1       	rcall	.+620    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_MDMCFG4,  settings->MDMCFG4);
 21c:	6f 81       	ldd	r22, Y+7	; 0x07
 21e:	80 e1       	ldi	r24, 0x10	; 16
 220:	68 df       	rcall	.-304    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MDMCFG4);
 222:	80 e1       	ldi	r24, 0x10	; 16
 224:	58 df       	rcall	.-336    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 226:	30 d1       	rcall	.+608    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_MDMCFG3,  settings->MDMCFG3);
 228:	68 85       	ldd	r22, Y+8	; 0x08
 22a:	81 e1       	ldi	r24, 0x11	; 17
 22c:	62 df       	rcall	.-316    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MDMCFG3);
 22e:	81 e1       	ldi	r24, 0x11	; 17
 230:	52 df       	rcall	.-348    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 232:	2a d1       	rcall	.+596    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_MDMCFG2,  settings->MDMCFG2);
 234:	69 85       	ldd	r22, Y+9	; 0x09
 236:	82 e1       	ldi	r24, 0x12	; 18
 238:	5c df       	rcall	.-328    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MDMCFG2);
 23a:	82 e1       	ldi	r24, 0x12	; 18
 23c:	4c df       	rcall	.-360    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 23e:	24 d1       	rcall	.+584    	; 0x488 <transmit_UART0>
	//ccxxx0_Write(CCxxx0_MDMCFG1,  settings->MDMCFG1);
	//ccxxx0_Write(CCxxx0_MDMCFG0,  settings->MDMCFG0);
	ccxxx0_Write(CCxxx0_DEVIATN,  settings->DEVIATN);
 240:	6a 85       	ldd	r22, Y+10	; 0x0a
 242:	85 e1       	ldi	r24, 0x15	; 21
 244:	56 df       	rcall	.-340    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_DEVIATN);
 246:	85 e1       	ldi	r24, 0x15	; 21
 248:	46 df       	rcall	.-372    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 24a:	1e d1       	rcall	.+572    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_MCSM0 ,   settings->MCSM0 );
 24c:	6b 85       	ldd	r22, Y+11	; 0x0b
 24e:	88 e1       	ldi	r24, 0x18	; 24
 250:	50 df       	rcall	.-352    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MCSM0);
 252:	88 e1       	ldi	r24, 0x18	; 24
 254:	40 df       	rcall	.-384    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 256:	18 d1       	rcall	.+560    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FOCCFG,   settings->FOCCFG);
 258:	6c 85       	ldd	r22, Y+12	; 0x0c
 25a:	89 e1       	ldi	r24, 0x19	; 25
 25c:	4a df       	rcall	.-364    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FOCCFG);
 25e:	89 e1       	ldi	r24, 0x19	; 25
 260:	3a df       	rcall	.-396    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 262:	12 d1       	rcall	.+548    	; 0x488 <transmit_UART0>
	//ccxxx0_Write(CCxxx0_BSCFG,    settings->BSCFG);
	ccxxx0_Write(CCxxx0_WORCTRL,  settings->WORCTRL);
 264:	6d 85       	ldd	r22, Y+13	; 0x0d
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	44 df       	rcall	.-376    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_WORCTRL);
 26a:	80 e2       	ldi	r24, 0x20	; 32
 26c:	34 df       	rcall	.-408    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 26e:	0c d1       	rcall	.+536    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FSCAL3,   settings->FSCAL3);
 270:	6e 85       	ldd	r22, Y+14	; 0x0e
 272:	83 e2       	ldi	r24, 0x23	; 35
 274:	3e df       	rcall	.-388    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL3);
 276:	83 e2       	ldi	r24, 0x23	; 35
 278:	2e df       	rcall	.-420    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 27a:	06 d1       	rcall	.+524    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FSCAL2,   settings->FSCAL2);
 27c:	6f 85       	ldd	r22, Y+15	; 0x0f
 27e:	84 e2       	ldi	r24, 0x24	; 36
 280:	38 df       	rcall	.-400    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL2);
 282:	84 e2       	ldi	r24, 0x24	; 36
 284:	28 df       	rcall	.-432    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 286:	00 d1       	rcall	.+512    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FSCAL1,   settings->FSCAL1);
 288:	68 89       	ldd	r22, Y+16	; 0x10
 28a:	85 e2       	ldi	r24, 0x25	; 37
 28c:	32 df       	rcall	.-412    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL1);
 28e:	85 e2       	ldi	r24, 0x25	; 37
 290:	22 df       	rcall	.-444    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 292:	fa d0       	rcall	.+500    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FSCAL0,   settings->FSCAL0);
 294:	69 89       	ldd	r22, Y+17	; 0x11
 296:	86 e2       	ldi	r24, 0x26	; 38
 298:	2c df       	rcall	.-424    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL0);
 29a:	86 e2       	ldi	r24, 0x26	; 38
 29c:	1c df       	rcall	.-456    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 29e:	f4 d0       	rcall	.+488    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_TEST2,    settings->TEST2);
 2a0:	6a 89       	ldd	r22, Y+18	; 0x12
 2a2:	8c e2       	ldi	r24, 0x2C	; 44
 2a4:	26 df       	rcall	.-436    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_TEST2);
 2a6:	8c e2       	ldi	r24, 0x2C	; 44
 2a8:	16 df       	rcall	.-468    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 2aa:	ee d0       	rcall	.+476    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_TEST1,    settings->TEST1);
 2ac:	6b 89       	ldd	r22, Y+19	; 0x13
 2ae:	8d e2       	ldi	r24, 0x2D	; 45
 2b0:	20 df       	rcall	.-448    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_TEST1);
 2b2:	8d e2       	ldi	r24, 0x2D	; 45
 2b4:	10 df       	rcall	.-480    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 2b6:	e8 d0       	rcall	.+464    	; 0x488 <transmit_UART0>
	ccxxx0_Write(CCxxx0_TEST0,    settings->TEST0);
 2b8:	6c 89       	ldd	r22, Y+20	; 0x14
 2ba:	8e e2       	ldi	r24, 0x2E	; 46
 2bc:	1a df       	rcall	.-460    	; 0xf2 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_TEST0);
 2be:	8e e2       	ldi	r24, 0x2E	; 46
 2c0:	0a df       	rcall	.-492    	; 0xd6 <ccxxx0_Read>
	transmit_UART0(read);
 2c2:	e2 d0       	rcall	.+452    	; 0x488 <transmit_UART0>
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <CC_Receive>:
	transmit_string_UART0((unsigned char *)data_transmit);
	transmit_string_UART0("\r\n");
}

void CC_Receive()
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	ed 97       	sbiw	r28, 0x3d	; 61
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
	transmit_enable = 0;
 2de:	10 92 b0 00 	sts	0x00B0, r1
	unsigned char temp[61];
	ccxxx0_Strobe(CCxxx0_SIDLE);//Exit RX / TX, turn off frequency synthesizer and exit Wake-On-Radio mode if applicable
 2e2:	86 e3       	ldi	r24, 0x36	; 54
 2e4:	13 df       	rcall	.-474    	; 0x10c <ccxxx0_Strobe>
	ccxxx0_WriteBurst(CCxxx0_PATABLE, &paTable[0], 1); // max power
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	60 e6       	ldi	r22, 0x60	; 96
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	8e e3       	ldi	r24, 0x3E	; 62
 2f0:	2e df       	rcall	.-420    	; 0x14e <ccxxx0_WriteBurst>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f2:	8f ec       	ldi	r24, 0xCF	; 207
 2f4:	97 e0       	ldi	r25, 0x07	; 7
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <CC_Receive+0x2c>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <CC_Receive+0x32>
 2fc:	00 00       	nop
	_delay_ms(1);
	ccxxx0_Strobe(CCxxx0_SFRX); // flush rx buff
 2fe:	8a e3       	ldi	r24, 0x3A	; 58
 300:	05 df       	rcall	.-502    	; 0x10c <ccxxx0_Strobe>
	ccxxx0_Strobe(CCxxx0_SRX);// goto rx mode
 302:	84 e3       	ldi	r24, 0x34	; 52
 304:	03 df       	rcall	.-506    	; 0x10c <ccxxx0_Strobe>
 306:	8e 01       	movw	r16, r28
 308:	05 5c       	subi	r16, 0xC5	; 197
 30a:	1f 4f       	sbci	r17, 0xFF	; 255
			ccxxx0_Strobe(CCxxx0_SRX); // goto rx mode
			/*for(int i = 0; i< 60; i++){
				transmit_UART0(temp[i]);
				_delay_us(10);
			}*/
			if ((temp[1] == 'C') && (temp[2] == 'Q')){
 30c:	0f 2e       	mov	r0, r31
 30e:	f0 ef       	ldi	r31, 0xF0	; 240
 310:	cf 2e       	mov	r12, r31
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	df 2e       	mov	r13, r31
 316:	f0 2d       	mov	r31, r0
			for(int i=0;i<34;i++) {
				data[i] = temp[24+i];
			}
			data[34]='\0';
 318:	0f 2e       	mov	r0, r31
 31a:	f2 e1       	ldi	r31, 0x12	; 18
 31c:	ef 2e       	mov	r14, r31
 31e:	f1 e0       	ldi	r31, 0x01	; 1
 320:	ff 2e       	mov	r15, r31
 322:	f0 2d       	mov	r31, r0
			
			uint8_t *framePtr;
			framePtr = temp;
			crc = crc16(temp+1,57);
			PORTC = 0xAA;
 324:	0f 2e       	mov	r0, r31
 326:	fa ea       	ldi	r31, 0xAA	; 170
 328:	8f 2e       	mov	r8, r31
 32a:	f0 2d       	mov	r31, r0
			transmit_string_UART0("CRCA");
			PORTC = 0xBB;
 32c:	0f 2e       	mov	r0, r31
 32e:	fb eb       	ldi	r31, 0xBB	; 187
 330:	9f 2e       	mov	r9, r31
 332:	f0 2d       	mov	r31, r0
	ccxxx0_Strobe(CCxxx0_SFRX); // flush rx buff
	ccxxx0_Strobe(CCxxx0_SRX);// goto rx mode
	//transmit_string_UART0("Started\r\n");
	while(1)
	{
		char bytes_RXFIFO = ccxxx0_Read(CCxxx0_RXBYTES);
 334:	8b ef       	ldi	r24, 0xFB	; 251
 336:	cf de       	rcall	.-610    	; 0xd6 <ccxxx0_Read>
		}*/
			
		// If you have a package for us
		//transmit_string_UART0((unsigned char *)"Checking \n");
		
		if( PINB&(1 << CC_GDO0) )
 338:	b0 9b       	sbis	0x16, 0	; 22
 33a:	fc cf       	rjmp	.-8      	; 0x334 <CC_Receive+0x6a>
		{
			//transmit_string_UART0("package available \n");
			while(PINB&(1 << CC_GDO0)){
 33c:	b0 99       	sbic	0x16, 0	; 22
 33e:	fe cf       	rjmp	.-4      	; 0x33c <CC_Receive+0x72>
				//transmit_string_UART0("in");	
			}
			//char bytes_RXFIFO = ccxxx0_Read(CCxxx0_RXBYTES);
			
			char bytes_RXFIFO = ccxxx0_Read(CCxxx0_RXBYTES);
 340:	8b ef       	ldi	r24, 0xFB	; 251
 342:	c9 de       	rcall	.-622    	; 0xd6 <ccxxx0_Read>
			}*/
			
			
			//for(int i =0; i<35; i++){
			//temp[i] = ccxxx0_Read(CCxxx0_RXFIFO);}
			ccxxx0_ReadBurst(CCxxx0_RXFIFO, temp,61);
 344:	4d e3       	ldi	r20, 0x3D	; 61
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	be 01       	movw	r22, r28
 34a:	6f 5f       	subi	r22, 0xFF	; 255
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	8f e3       	ldi	r24, 0x3F	; 63
 350:	e6 de       	rcall	.-564    	; 0x11e <ccxxx0_ReadBurst>
			//transmit_string_UART0("RXed data: ");
			
			ccxxx0_Strobe(CCxxx0_SFRX); // flush rx buf
 352:	8a e3       	ldi	r24, 0x3A	; 58
 354:	db de       	rcall	.-586    	; 0x10c <ccxxx0_Strobe>
			ccxxx0_Strobe(CCxxx0_SRX); // goto rx mode
 356:	84 e3       	ldi	r24, 0x34	; 52
 358:	d9 de       	rcall	.-590    	; 0x10c <ccxxx0_Strobe>
			/*for(int i = 0; i< 60; i++){
				transmit_UART0(temp[i]);
				_delay_us(10);
			}*/
			if ((temp[1] == 'C') && (temp[2] == 'Q')){
 35a:	8a 81       	ldd	r24, Y+2	; 0x02
 35c:	83 34       	cpi	r24, 0x43	; 67
 35e:	09 f0       	breq	.+2      	; 0x362 <CC_Receive+0x98>
 360:	5b c0       	rjmp	.+182    	; 0x418 <CC_Receive+0x14e>
 362:	8b 81       	ldd	r24, Y+3	; 0x03
 364:	81 35       	cpi	r24, 0x51	; 81
 366:	09 f0       	breq	.+2      	; 0x36a <CC_Receive+0xa0>
 368:	57 c0       	rjmp	.+174    	; 0x418 <CC_Receive+0x14e>
 36a:	fe 01       	movw	r30, r28
 36c:	79 96       	adiw	r30, 0x19	; 25
 36e:	d6 01       	movw	r26, r12
			for(int i=0;i<34;i++) {
				data[i] = temp[24+i];
 370:	81 91       	ld	r24, Z+
 372:	8d 93       	st	X+, r24
			/*for(int i = 0; i< 60; i++){
				transmit_UART0(temp[i]);
				_delay_us(10);
			}*/
			if ((temp[1] == 'C') && (temp[2] == 'Q')){
			for(int i=0;i<34;i++) {
 374:	e0 17       	cp	r30, r16
 376:	f1 07       	cpc	r31, r17
 378:	d9 f7       	brne	.-10     	; 0x370 <CC_Receive+0xa6>
				data[i] = temp[24+i];
			}
			data[34]='\0';
 37a:	f7 01       	movw	r30, r14
 37c:	10 82       	st	Z, r1
			
			uint8_t *framePtr;
			framePtr = temp;
			crc = crc16(temp+1,57);
 37e:	69 e3       	ldi	r22, 0x39	; 57
 380:	ce 01       	movw	r24, r28
 382:	02 96       	adiw	r24, 0x02	; 2
 384:	6c de       	rcall	.-808    	; 0x5e <crc16>
 386:	90 93 ef 00 	sts	0x00EF, r25
 38a:	80 93 ee 00 	sts	0x00EE, r24
			PORTC = 0xAA;
 38e:	85 ba       	out	0x15, r8	; 21
			transmit_string_UART0("CRCA");
 390:	81 ea       	ldi	r24, 0xA1	; 161
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	7d d0       	rcall	.+250    	; 0x490 <transmit_string_UART0>
			PORTC = 0xBB;
 396:	95 ba       	out	0x15, r9	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 398:	fd e0       	ldi	r31, 0x0D	; 13
 39a:	fa 95       	dec	r31
 39c:	f1 f7       	brne	.-4      	; 0x39a <CC_Receive+0xd0>
 39e:	00 00       	nop
			_delay_us(5);
			crc1 = crc;
 3a0:	80 91 ee 00 	lds	r24, 0x00EE
 3a4:	90 91 ef 00 	lds	r25, 0x00EF
 3a8:	80 93 ed 00 	sts	0x00ED, r24
			crc2 = (crc>>8);
 3ac:	90 93 4e 01 	sts	0x014E, r25
			transmit_UART0(crc1);
 3b0:	6b d0       	rcall	.+214    	; 0x488 <transmit_UART0>
			transmit_UART0(crc2);
 3b2:	80 91 4e 01 	lds	r24, 0x014E
 3b6:	68 d0       	rcall	.+208    	; 0x488 <transmit_UART0>
 3b8:	8a e1       	ldi	r24, 0x1A	; 26
 3ba:	8a 95       	dec	r24
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <CC_Receive+0xf0>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <CC_Receive+0xf6>
			_delay_us(10);
			//transmit_string_UART0("      ");
			uint16_t crcFromMsg = ((uint16_t)temp[58] << 8) | temp[59];
			transmit_string_UART0("CRCB");
 3c0:	86 ea       	ldi	r24, 0xA6	; 166
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	65 d0       	rcall	.+202    	; 0x490 <transmit_string_UART0>
 3c6:	9d e0       	ldi	r25, 0x0D	; 13
 3c8:	9a 95       	dec	r25
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <CC_Receive+0xfe>
 3cc:	00 00       	nop
			_delay_us(5);
			transmit_UART0(temp[58]);
 3ce:	8b ad       	ldd	r24, Y+59	; 0x3b
 3d0:	5b d0       	rcall	.+182    	; 0x488 <transmit_UART0>
			transmit_UART0(temp[59]);
 3d2:	8c ad       	ldd	r24, Y+60	; 0x3c
 3d4:	59 d0       	rcall	.+178    	; 0x488 <transmit_UART0>
 3d6:	ea e1       	ldi	r30, 0x1A	; 26
 3d8:	ea 95       	dec	r30
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <CC_Receive+0x10e>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <CC_Receive+0x114>
			_delay_us(10);
			//transmit_string_UART("Now checking equality of the CRCs\r\n");
			//_delay_ms(5);
			//Check if CRCs match
			if((crc1==temp[58])&&(crc2==temp[59])){
 3de:	9b ad       	ldd	r25, Y+59	; 0x3b
 3e0:	80 91 ed 00 	lds	r24, 0x00ED
 3e4:	98 13       	cpse	r25, r24
 3e6:	18 c0       	rjmp	.+48     	; 0x418 <CC_Receive+0x14e>
 3e8:	9c ad       	ldd	r25, Y+60	; 0x3c
 3ea:	80 91 4e 01 	lds	r24, 0x014E
 3ee:	98 13       	cpse	r25, r24
 3f0:	13 c0       	rjmp	.+38     	; 0x418 <CC_Receive+0x14e>
				transmit_string_UART0("DATA");
 3f2:	8b ea       	ldi	r24, 0xAB	; 171
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	4c d0       	rcall	.+152    	; 0x490 <transmit_string_UART0>
 3f8:	fd e0       	ldi	r31, 0x0D	; 13
 3fa:	fa 95       	dec	r31
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <CC_Receive+0x130>
 3fe:	00 00       	nop
 400:	56 01       	movw	r10, r12
				_delay_us(5);
				//transmit_string_UART0("Data = ");
				//_delay_us(5);
				//transmit_string_UART0(data);
				for(int i =0; i<34; i++){
					transmit_UART0(data[i]);
 402:	f5 01       	movw	r30, r10
 404:	81 91       	ld	r24, Z+
 406:	5f 01       	movw	r10, r30
 408:	3f d0       	rcall	.+126    	; 0x488 <transmit_UART0>
				transmit_string_UART0("DATA");
				_delay_us(5);
				//transmit_string_UART0("Data = ");
				//_delay_us(5);
				//transmit_string_UART0(data);
				for(int i =0; i<34; i++){
 40a:	ae 14       	cp	r10, r14
 40c:	bf 04       	cpc	r11, r15
 40e:	c9 f7       	brne	.-14     	; 0x402 <CC_Receive+0x138>
 410:	fd e0       	ldi	r31, 0x0D	; 13
 412:	fa 95       	dec	r31
 414:	f1 f7       	brne	.-4      	; 0x412 <CC_Receive+0x148>
 416:	00 00       	nop
					transmit_string_UART0("\r\n");
					//ccxxx0_ReadBurst(CCxxx0_RXFIFO, temp, pkt_length-8);
					//transmit_string_UART0((char *)temp);
				}
			}*/
			ccxxx0_Strobe(CCxxx0_SIDLE);//Exit RX / TX, turn off frequency synthesizer and exit Wake-On-Radio mode if applicable
 418:	86 e3       	ldi	r24, 0x36	; 54
 41a:	78 de       	rcall	.-784    	; 0x10c <ccxxx0_Strobe>
			ccxxx0_WriteBurst(CCxxx0_PATABLE, &paTable[0], 1); // max power
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	50 e0       	ldi	r21, 0x00	; 0
 420:	60 e6       	ldi	r22, 0x60	; 96
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	8e e3       	ldi	r24, 0x3E	; 62
 426:	93 de       	rcall	.-730    	; 0x14e <ccxxx0_WriteBurst>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	8f ec       	ldi	r24, 0xCF	; 207
 42a:	97 e0       	ldi	r25, 0x07	; 7
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <CC_Receive+0x162>
 430:	00 c0       	rjmp	.+0      	; 0x432 <CC_Receive+0x168>
 432:	00 00       	nop
			_delay_ms(1);
			ccxxx0_Strobe(CCxxx0_SFRX); // flush rx buf
 434:	8a e3       	ldi	r24, 0x3A	; 58
 436:	6a de       	rcall	.-812    	; 0x10c <ccxxx0_Strobe>
			ccxxx0_Strobe(CCxxx0_SRX); // goto rx mode
 438:	84 e3       	ldi	r24, 0x34	; 52
 43a:	68 de       	rcall	.-816    	; 0x10c <ccxxx0_Strobe>
 43c:	7b cf       	rjmp	.-266    	; 0x334 <CC_Receive+0x6a>

0000043e <main>:

/*****
	MAIN program
*****/
int main(void) {
	DDRC = 0xFF;
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	84 bb       	out	0x14, r24	; 20

	/*uint8_t rssi_dec;
	int16_t rssi_dBm;
	uint8_t rssi_offset = 74; // CC1101 at 433 MHz*/
	
	cli(); 							//Clears the global interrupts			
 442:	f8 94       	cli
	ATMEGA_Init();
 444:	36 de       	rcall	.-916    	; 0xb2 <ATMEGA_Init>
	sei(); 
 446:	78 94       	sei
 448:	2f ef       	ldi	r18, 0xFF	; 255
 44a:	83 ed       	ldi	r24, 0xD3	; 211
 44c:	90 e3       	ldi	r25, 0x30	; 48
 44e:	21 50       	subi	r18, 0x01	; 1
 450:	80 40       	sbci	r24, 0x00	; 0
 452:	90 40       	sbci	r25, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <main+0x10>
 456:	00 c0       	rjmp	.+0      	; 0x458 <main+0x1a>
 458:	00 00       	nop

	//transmit_string_UART0((unsigned char *)"cc1101_PowerOnReset\r\n");
	_delay_ms(2000);
	ccxxx0_PowerOnReset();
 45a:	90 de       	rcall	.-736    	; 0x17c <ccxxx0_PowerOnReset>
	//PORTC=0x01;
//	_delay_ms(1000);
	//transmit_string_UART0((unsigned char *)"cc1101_Setup\r\n");
	ccxxx0_Setup(&rfSettings);
 45c:	81 e6       	ldi	r24, 0x61	; 97
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	b0 de       	rcall	.-672    	; 0x1c2 <ccxxx0_Setup>
	//transmit_string_UART0((unsigned char *)"Started\r\n");
	unsigned char part = 'b';
	part = ccxxx0_Read(CCxxx0_VERSION);
 462:	81 ef       	ldi	r24, 0xF1	; 241
 464:	38 de       	rcall	.-912    	; 0xd6 <ccxxx0_Read>
	//transmit_string_UART0((unsigned char*)"printing part number...\t");
	//transmit_UART0(part);
	unsigned char current_status[8];
	PORTC=0xFF;
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	85 bb       	out	0x15, r24	; 21
		//transmit_string_UART0(address);

		while(1)
		{
			//toggle_ind=PINC;
			CC_Receive();
 46a:	2f df       	rcall	.-418    	; 0x2ca <CC_Receive>

0000046c <init_UART0>:
	
}
*/
void init_UART0(void)
{
  UCSRA = 0;
 46c:	1b b8       	out	0x0b, r1	; 11
  UCSRB = 0;
 46e:	1a b8       	out	0x0a, r1	; 10
  UCSRC = 0;
 470:	10 bc       	out	0x20, r1	; 32
    
  ///Double Baud Rate
  UCSRA |= (1<<U2X);
 472:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSRB |=(1<<RXEN)|(1<<TXEN);
 474:	8a b1       	in	r24, 0x0a	; 10
 476:	88 61       	ori	r24, 0x18	; 24
 478:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSRC |=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 47a:	80 b5       	in	r24, 0x20	; 32
 47c:	86 68       	ori	r24, 0x86	; 134
 47e:	80 bd       	out	0x20, r24	; 32
  ///Set Baud Rate to 9600
  UBRRL = 103;
 480:	87 e6       	ldi	r24, 0x67	; 103
 482:	89 b9       	out	0x09, r24	; 9
  UBRRH = 0;
 484:	10 bc       	out	0x20, r1	; 32
 486:	08 95       	ret

00000488 <transmit_UART0>:
}

void transmit_UART0(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSRA & (_BV(UDRE))) );
 488:	5d 9b       	sbis	0x0b, 5	; 11
 48a:	fe cf       	rjmp	.-4      	; 0x488 <transmit_UART0>
  //* Start transmission
  UDR = data;
 48c:	8c b9       	out	0x0c, r24	; 12
 48e:	08 95       	ret

00000490 <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 490:	fc 01       	movw	r30, r24
 492:	20 81       	ld	r18, Z
 494:	22 23       	and	r18, r18
 496:	39 f0       	breq	.+14     	; 0x4a6 <transmit_string_UART0+0x16>
 498:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSRA & (_BV(UDRE))) );
 49a:	5d 9b       	sbis	0x0b, 5	; 11
 49c:	fe cf       	rjmp	.-4      	; 0x49a <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR = buffer[i];
 49e:	2c b9       	out	0x0c, r18	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 4a0:	21 91       	ld	r18, Z+
 4a2:	21 11       	cpse	r18, r1
 4a4:	fa cf       	rjmp	.-12     	; 0x49a <transmit_string_UART0+0xa>
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
